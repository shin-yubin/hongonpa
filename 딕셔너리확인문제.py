dictionary = {
    "이름" : "구름",
    "종족" : "강아지"
}

dictionary["이름"] # 구름
dictionary["나이"] # error > 딕셔너리 내부에 키가 없기 때문!

#위와 같은 오류를 방지하기 위해 딕셔너리 
# 내부에 키가 있는지 확인하는 연산자 in

if "나이" in dictionary:
    print(dictionary["나이"])
else:
    print("없는 키입니다.")
    
#인터넷에서 어떤 데이터를 긁어 올때 중간중간 없는 데이터 있을 수 있다.
#그러한 경우,
날씨["7월"]["10일"] #key 에러가 발생할수있따!
#미리 확인해볼것

dictionary.get("이름") 
#만약 없는 요소에 접근하면 오류를 내지 않고 None을 출력합니다.
dictionary["이름"]

if dictionary.get("나이") == None:
    dictionary.get("나이")
else:
    print("없는키입니다.")
    
    
"""Min_Hyunk Ji
Min_Hyunk Ji
8개월 전(수정됨)
질문있습니다.
3번문제 이해가 안가는데.... 
1:3, 2:4, 6:1 같이 어떻게  
" : "<- 형식으로 나누어져는지 카운터가 
되었는지 알기 힘듭니다. 원래가 그렇게 나누어져 
카운티이 되나요?



윤인성
윤인성
8개월 전
딕셔너리를 활용하기 때문에,
{
....키: 값,
...키: 값
} 형태로 세어집니다!

Min_Hyunk Ji
8개월 전
윤인성 아!! 그렇군요 감사합니다.


"""

#3번 카운터 코드 통째로 외우는거 추천드립니다.
#4번 딕셔너리나 배열에 있는 걸 꺼내서 한번에 출력하는걸
#flatten 이라고 합니다.
# 3, 4 번 통째로 외워버리자.